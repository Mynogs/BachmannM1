
N = 16
-- DIO216
-- DIO232
-- DIO264
-- DIO280

block.setSize(51, N / 8 * 100 + 1)

generic = {
  name = 'DIO2' .. N,
  parameter = {
    station = 1,
    slot = 4,
    channelMode = {}
  },

  refreshPins = function(self)
    do
      local inputs, outputs = 0, 0
      for i = 1, #self.parameter.channelMode do
        local mode = self.parameter.channelMode[i]
        if mode == 0 then
          inputs = inputs + 1
        elseif mode == 1 then
          outputs = outputs + 1
        end
      end
      block.setInputsPinCount(inputs)
      block.setOutputsPinCount(outputs)
    end
    do
      local inputs, outputs = 0, 0
      for i = 1, #self.parameter.channelMode do
        local mode = self.parameter.channelMode[i]
        if mode == 0 then
          inputs = inputs + 1
          block.setInputPinDefault(inputs, 'false')
          block.setInputPinName(inputs, i)
        elseif mode == 1 then
          outputs = outputs + 1
          block.setOutputPinName(outputs, i)
        end
      end
    end
  end,

  init = function(self)
    block.modifyFlags('SupressStartFunctionCall', true)
    block.modifyFlags('SupressStopFunctionCall', true)
    block.modifyFlags('Realtime', true)
    if #self.parameter.channelMode == 0 then
      if N == 16 or N == 32 then
        for i = 1, N / 2 do
          self.parameter.channelMode[i] = 0
        end
        for i = N / 2 + 1, N do
          self.parameter.channelMode[i] = 1
        end
      else
        for i = 1, N do
          self.parameter.channelMode[i] = ((i - 1) & (1 << 3) == 0) and 0 or 1
        end
      end
    end
    generic.refreshPins(self)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Bachmann M1', self.name)
    local s = ''
    for i = 1, 16 do
      s = s .. i .. '\n'
    end
    gui.add('ComboBox', 'ComboBoxSlot', 'Slot', s, {Width = 50})
    gui.set('ComboBoxSlot', 'ItemIndex', self.parameter.slot - 1)
    local n = (N == 16 or N == 32) and N or 16
    for i = 1, n do
      gui.add('ComboBox', 'ComboBox' .. i, 'Channel ' .. i, [[
        Digital Input
        Digital Output
      ]])
      gui.set('ComboBox' .. i, 'ItemIndex', self.parameter.channelMode[i] or 0)
    end
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.slot = gui.get('ComboBoxSlot', 'ItemIndex') + 1
    for i = 1, N do
      self.parameter.channelMode[i] = gui.get('ComboBox' .. i, 'ItemIndex')
    end
    generic.refreshPins(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x00,
      CenterDrawSource = 'draw.setColorA(0.89, 0.58, 0.01) draw.box(1, 1, w - 2, 3) draw.text(0, 4, w, h, "' .. self.parameter.station .. '/'  .. self.parameter.slot .. '", 1)',
      FillColorSource = '0.36, 0.37, 0.42',
      PinNameColorSource = '1, 1, 1',
    }
  end,

  generate = function(self)
    if remote then
      local _, _, group = remote:find('(%w*%d)')
      if group ~= 'BachmannM1' then
        return false
      end
    end
    local source =
      [==[
        local block = {}

        block.start = function()
          block.svi = block.parent.svi or require 'svi'
        end

        block.step = function(...)
          local a = {...}
          local w = block.svi.writeVariable
          local r = block.svi.readVariable
STEPA
STEPB
        end

        return block
      ]==]
    local step1 = ''
    local step2 = ''
    local inputs, outputs = 0, 0
    for i = 1, #self.parameter.channelMode do
      local mode = self.parameter.channelMode[i]
      if mode == 0 then
        outputs = outputs + 1
        if step2:len() > 0 then
          step2 = step2 .. ', '
        end
        step2 = step2 .. "r('MIO/" .. self.parameter.slot .. "/" .. i .."')"
      elseif mode == 1 then
        inputs = inputs + 1
        step1 = step1 .. string.rep(' ', 10) .. "w('MIO/" .. self.parameter.slot .. "/" .. i .."', a[" .. inputs .. "])\n"
      end
    end
    local replaces = {
      ['NAME'] = self.name,
      ['STEPA'] = step1,
      ['STEPB'] = string.rep(' ', 10) .. 'return ' .. step2 .. '\n',
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

