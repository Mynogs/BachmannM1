-- 28.02.2017 11:13:40 AR V1.0a
-- 01.04.2017 16:57:54 AR V1.0b
-- 20.02.2019 16:50:38 AR V1.0a

block.setSize(51, 51)

generic = {
  name = 'Generic modul',
  parameter = {
    station = 1,
    slot = 4,
    channelMode = {}
  },

  refreshPins = function(self)
    do
      local inputs, outputs = 0, 0
      for i = 1, #self.parameter.channelMode do
        local mode = self.parameter.channelMode[i]
        if mode == 1 then
          inputs = inputs + 1
        elseif mode == 2 then
          outputs = outputs + 1
        elseif mode == 3 then
          inputs = inputs + 1
        elseif mode == 4 then
          outputs = outputs + 1
        elseif mode == 5 then
          outputs = outputs + 1
        end
      end
      block.setInputsPinCount(inputs)
      block.setOutputsPinCount(outputs)
    end
    do
      local inputs, outputs = 0, 0
      for i = 1, #self.parameter.channelMode do
        local mode = self.parameter.channelMode[i]
        if mode == 1 then
          inputs = inputs + 1
          block.setInputPinDefault(inputs, 'false')
          block.setInputPinTypeRestrains(inputs, 'boolean')
          block.setInputPinName(inputs, 'DI-' .. i)
        elseif mode == 2 then
          outputs = outputs + 1
          block.setOutputPinTypeRestrains(outputs, 'boolean')
          block.setOutputPinName(outputs, 'DO-' .. i)
        elseif mode == 3 then
          inputs = inputs + 1
          block.setInputPinDefault(inputs, '0.0')
          block.setInputPinTypeRestrains(inputs, 'number')
          block.setInputPinName(inputs, 'AI-' .. i)
        elseif mode == 4 then
          outputs = outputs + 1
          block.setOutputPinTypeRestrains(outputs, 'number')
          block.setOutputPinName(outputs, 'AO-' .. i)
        elseif mode == 5 then
          outputs = outputs + 1
          block.setOutputPinTypeRestrains(outputs, 'number')
          block.setOutputPinName(outputs, 'PT100-' .. i)
        end
      end
    end
  end,

  init = function(self)
    block.modifyFlags('SupressStopFunctionCall', true)
    block.modifyFlags('Realtime', true)
    if #self.parameter.channelMode == 0 then
      for i = 1, 4 do
        self.parameter.channelMode[i] = 1
      end
      for i = 5, 8 do
        self.parameter.channelMode[i] = 2
      end
    end
    generic.refreshPins(self)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Bachmann M1', self.name)
    local s = ''
    for i = 1, 16 do
      s = s .. i .. '\n'
    end
    gui.add('ComboBox', 'ComboBoxStation', 'Station', s, {Width = 50})
    gui.add('ComboBox', 'ComboBoxSlot', 'Slot', s, {Width = 50})
    gui.set('ComboBoxStation', 'ItemIndex', self.parameter.station - 1)
    gui.set('ComboBoxSlot', 'ItemIndex', self.parameter.slot - 1)
    for i = 1, 32 do
      gui.add('ComboBox', 'ComboBox' .. i, 'Channel ' .. i, [[
        Unassigned
        Digital Input
        Digital Output
        Analog Input (raw ADC value)
        Analog Output (raw ADC value)
        PT100 (0.1K)
      ]])
      gui.set('ComboBox' .. i, 'ItemIndex', self.parameter.channelMode[i] or 0)
    end
    gui.setSize(400, 600)
    --gui.setSize()
  end,

  apply = function(self)
    self.parameter.station = gui.get('ComboBoxStation', 'ItemIndex') + 1
    self.parameter.slot = gui.get('ComboBoxSlot', 'ItemIndex') + 1
    for i = 1, 32 do
      self.parameter.channelMode[i] = gui.get('ComboBox' .. i, 'ItemIndex')
    end
    generic.refreshPins(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x00,
      CenterDrawSource = 'draw.setColorA(0.89, 0.58, 0.01) draw.box(1, 1, w - 2, 3) draw.text(0, 4, w, h, "' .. self.parameter.station .. '/' .. self.parameter.slot .. '", 1)',
      FillColorSource = '0.36, 0.37, 0.42',
      PinNameColorSource = '1, 1, 1',
    }
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
        end

        block.step = function(...)
          local a = {...}
          local w = block.parent.svi.writeVariable
          local r = block.parent.svi.readVariable
STEPA
STEPB
        end

        return block
      ]==]
    local step1 = ''
    local step2 = ''
    local step3 = ''
    local inputs, outputs = 0, 0
    for i = 1, #self.parameter.channelMode do
      local mode = self.parameter.channelMode[i]
      if mode == 1 then
        -- DO
        inputs = inputs + 1
        step1 = step1 .. string.rep(' ', 10) .. "w('MIO/" .. self.parameter.slot .. "/" .. i .."', a[" .. inputs .. "])\n"
      elseif mode == 2 then
        -- DI
        outputs = outputs + 1
        if step2:len() > 0 then
          step2 = step2 .. ', '
        end
        step2 = step2 .. "r('MIO/" .. self.parameter.slot .. "/" .. i .."')"
      elseif mode == 3 then
        -- AO
        inputs = inputs + 1
        step1 = step1 .. string.rep(' ', 10) .. "w('MIO/" .. self.parameter.slot .. "/" .. i .."', a[" .. inputs .. "])\n"
      elseif mode == 4 then
        -- AI
        outputs = outputs + 1
        if step2:len() > 0 then
          step2 = step2 .. ', '
        end
        step2 = step2 .. "r('MIO/" .. self.parameter.slot .. "/" .. i .."')"
      elseif mode == 5 then
        -- PT100
        inputs = inputs + 1
        if step2:len() > 0 then
          step2 = step2 .. ', '
        end
        step2 = step2 .. "r('MIO/" .. self.parameter.slot .. "/" .. i .."') * 0.1 - 273.15"
      end
    end
    local replaces = {
      ['NAME'] = self.name,
      ['STEPA'] = step1,
      ['STEPB'] = string.rep(' ', 10) .. 'return ' .. step2 .. '\n',
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

