-- 06.02.2019 06:58:11 AR V1.0a

N = 16

block.setSize(51, N / 8 * 100 + 1)

generic = {
  name = 'SLC284',
  parameter = {
    station = 1,
    slot = 4,
    bypass = false,
  },

  refreshPins = function(self)
    if self.parameter.bypass then
      block.setInputsPinCount(8)
      for i = 1, 8 do
        block.setInputPinTypeRestrains(i, 'boolean')
        block.setInputPinName(i, 16 + i)
      end
    else
      block.setInputsPinCount(0)
    end
  end,

  init = function(self)
    generic.refreshPins(self)
    block.setOutputsPinCount(N)
    for i = 1, N do
      block.setOutputPinTypeRestrains(i, 'boolean')
      block.setOutputPinName(i, (((i - 1) % 8 < 4) and 'A' or 'B') .. i)
    end
    block.modifyFlags('SupressStopFunctionCall', true)
    block.modifyFlags('Realtime', true)
  end,

  open = function(self)
    local s = ''
    for i = 1, 16 do
      s = s .. i .. '\n'
    end
    gui.add('Info', 'Info', 'Bachmann M1', self.name)
    gui.add('ComboBox', 'ComboBoxSlot', 'Slot', s, {Width = 50})
    gui.add('CheckBox', 'CheckBoxBypass', 'SLC284 has bypass application', {Width = 200})
    gui.set('ComboBoxSlot', 'ItemIndex', self.parameter.slot - 1)
    gui.set('CheckBoxBypass', 'Checked', self.parameter.bypass)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.slot = gui.get('ComboBoxSlot', 'ItemIndex') + 1
    self.parameter.bypass = gui.get('CheckBoxBypass', 'Checked')
    self.parameter.bypass = gui.get('CheckBoxBypass', 'Checked')
    generic.refreshPins(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x00,
      CenterDrawSource = 'draw.setColorA(0.89, 0.58, 0.01) draw.box(1, 1, w - 2, 3) draw.text(0, 4, w, h, "' .. self.parameter.station .. '/'  .. self.parameter.slot .. '", 1)',
      FillColorSource = '1.0, 0.9, 0.2',
      PinNameColorSource = '0, 0, 0',
    }
  end,

  generate = function(self)
    if remote then
      local _, _, group = remote:find('(%w*%d)')
      if group ~= 'BachmannM1' then
        return false
      end
    end
    local source =
      [==[
        local block = {}

        block.start = function()
          block.svi = block.parent.svi or require 'svi'
          for i = 1, 8 do
            block.svi.createVariable('SLC284_' .. i, block.svi.INOUT | block.svi.UINT1)
            print('SLC284_' .. i)
          end
        end

        block.step = function(...)
          local a = {...}
          for i = 1, #a do
            block.svi.writeVariable('CN/SLC284_' .. i, a[i])
          end
          local q = {}
          for i = 1, NN do
            q[#q + 1] = block.svi.readVariable('PATH' .. i)
          end
          return table.unpack(q);
        end

        return block
      ]==]
    local replaces = {
      ['NN'] = N,
      ['NAME'] = self.name,
      ['PATH'] = 'MIO/' .. self.parameter.slot .. '/',
    }
    return string.gsub(source, '%a+', replaces)
  end,

}





